name: Common Build Steps

on:
  workflow_call:
    inputs:
      build-firmware:
        description: 'Whether to build firmware'
        required: false
        type: boolean
        default: true
      build-configurator:
        description: 'Whether to build configurator'
        required: false
        type: boolean
        default: false
      artifact-name-suffix:
        description: 'Suffix for artifact names'
        required: true
        type: string
      run-windows:
        description: 'Whether to run Windows job'
        required: false
        type: boolean
        default: true
      run-linux:
        description: 'Whether to run Linux job'
        required: false
        type: boolean
        default: true
      run-macos:
        description: 'Whether to run macOS job'
        required: false
        type: boolean
        default: true

jobs:
  windows:
    runs-on: windows-latest
    if: ${{ inputs.run-windows }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pillow
        
    - name: Install ARM GNU Toolchain
      run: |
        $url = "https://github.com/xpack-dev-tools/arm-none-eabi-gcc-xpack/releases/download/v13.2.1-1.1/xpack-arm-none-eabi-gcc-13.2.1-1.1-win32-x64.zip"
        $output = "arm-toolchain.zip"
        Invoke-WebRequest -Uri $url -OutFile $output
        Expand-Archive -Path $output -DestinationPath "C:\arm-toolchain"
        echo "C:\arm-toolchain\xpack-arm-none-eabi-gcc-13.2.1-1.1\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
    - name: Configure CMake (with automatic SDK fetch and patch)
      run: |
        mkdir build
        cd build
        cmake -S .. -B . -G Ninja -DPICO_SDK_FETCH_FROM_GIT=ON "-DPICO_SDK_FETCH_FROM_GIT_TAG=2.1.1" "-DPICO_BOARD_HEADER_DIRS=../src/boards" -DPICO_BOARD=pico9918 -DBUILD_TOOLS_FROM_SOURCE=ON
        
    - name: Build Firmware
      if: ${{ inputs.build-firmware }}
      run: |
        cd build
        cmake --build . --target firmware
        
    - name: Build Configurator
      if: ${{ inputs.build-configurator }}
      run: |
        cd build
        cmake --build . --target configurator_all
        
    - name: Upload Firmware Artifacts
      if: ${{ inputs.build-firmware }}
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ inputs.artifact-name-suffix }}
        path: build/dist/*.uf2
        
    - name: Upload Configurator Artifacts
      if: ${{ inputs.build-configurator }}
      uses: actions/upload-artifact@v4
      with:
        name: configurator-${{ inputs.artifact-name-suffix }}
        path: |
          build/dist/*.rom
          build/dist/*.bin
          build/dist/*.nabu
          build/dist/*.sg

  linux:
    runs-on: ubuntu-latest
    if: ${{ inputs.run-linux }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake python3 python3-pip git gcc-arm-none-eabi
        pip3 install pillow
        
    - name: Configure CMake (with automatic SDK fetch and patch)
      run: |
        mkdir build
        cd build
        cmake -S .. -B . -G Ninja -DPICO_SDK_FETCH_FROM_GIT=ON "-DPICO_SDK_FETCH_FROM_GIT_TAG=2.1.1" "-DPICO_BOARD_HEADER_DIRS=../src/boards" -DPICO_BOARD=pico9918 -DBUILD_TOOLS_FROM_SOURCE=ON
        
    - name: Build Firmware
      if: ${{ inputs.build-firmware }}
      run: |
        cd build
        cmake --build . --target firmware
        
    - name: Build Configurator
      if: ${{ inputs.build-configurator }}
      run: |
        cd build
        cmake --build . --target configurator_all
        
    - name: Upload Firmware Artifacts
      if: ${{ inputs.build-firmware }}
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ inputs.artifact-name-suffix }}
        path: build/dist/*.uf2
        
    - name: Upload Configurator Artifacts
      if: ${{ inputs.build-configurator }}
      uses: actions/upload-artifact@v4
      with:
        name: configurator-${{ inputs.artifact-name-suffix }}
        path: |
          build/dist/*.rom
          build/dist/*.bin
          build/dist/*.nabu
          build/dist/*.sg

  macos:
    runs-on: macos-latest
    if: ${{ inputs.run-macos }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install dependencies
      run: |
        brew install cmake ninja python3 git
        pip3 install pillow --break-system-packages
        
    - name: Install ARM GNU Toolchain
      run: |
        # Use the same version as other platforms for consistency
        curl -L "https://github.com/xpack-dev-tools/arm-none-eabi-gcc-xpack/releases/download/v13.2.1-1.1/xpack-arm-none-eabi-gcc-13.2.1-1.1-darwin-arm64.tar.gz" -o arm-toolchain.tar.gz
        sudo tar -xzf arm-toolchain.tar.gz -C /opt
        echo "/opt/xpack-arm-none-eabi-gcc-13.2.1-1.1/bin" >> $GITHUB_PATH
        
    - name: Configure CMake (with automatic SDK fetch and patch)
      run: |
        mkdir build
        cd build
        cmake -S .. -B . -G Ninja -DPICO_SDK_FETCH_FROM_GIT=ON "-DPICO_SDK_FETCH_FROM_GIT_TAG=2.1.1" "-DPICO_BOARD_HEADER_DIRS=../src/boards" -DPICO_BOARD=pico9918 -DBUILD_TOOLS_FROM_SOURCE=ON
        
    - name: Build Firmware
      if: ${{ inputs.build-firmware }}
      run: |
        cd build
        cmake --build . --target firmware
        
    - name: Build Configurator
      if: ${{ inputs.build-configurator }}
      run: |
        cd build
        cmake --build . --target configurator_all
        
    - name: Upload Firmware Artifacts
      if: ${{ inputs.build-firmware }}
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ inputs.artifact-name-suffix }}
        path: build/dist/*.uf2
        
    - name: Upload Configurator Artifacts
      if: ${{ inputs.build-configurator }}
      uses: actions/upload-artifact@v4
      with:
        name: configurator-${{ inputs.artifact-name-suffix }}
        path: |
          build/dist/*.rom
          build/dist/*.bin
          build/dist/*.nabu
          build/dist/*.sg
